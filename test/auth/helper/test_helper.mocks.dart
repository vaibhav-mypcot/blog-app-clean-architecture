// Mocks generated by Mockito 5.4.4 from annotations
// in blog_app/test/auth/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:blog_app/core/common/entities/user.dart' as _i9;
import 'package:blog_app/core/error/failure.dart' as _i8;
import 'package:blog_app/core/network/connection_checker.dart' as _i15;
import 'package:blog_app/core/usecase/usecase.dart' as _i12;
import 'package:blog_app/features/auth/data/datasources/auth_remote_data_source.dart'
    as _i5;
import 'package:blog_app/features/auth/data/models/user_model.dart' as _i2;
import 'package:blog_app/features/auth/domain/repository/auth_repository.dart'
    as _i3;
import 'package:blog_app/features/auth/domain/usecases/current_user.dart'
    as _i11;
import 'package:blog_app/features/auth/domain/usecases/user_sign_in.dart'
    as _i13;
import 'package:blog_app/features/auth/domain/usecases/user_sign_up.dart'
    as _i14;
import 'package:fpdart/fpdart.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:supabase_flutter/supabase_flutter.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthRepository_1 extends _i1.SmartFake
    implements _i3.AuthRepository {
  _FakeAuthRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoTrueClient_2 extends _i1.SmartFake implements _i4.GoTrueClient {
  _FakeGoTrueClient_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFunctionsClient_3 extends _i1.SmartFake
    implements _i4.FunctionsClient {
  _FakeFunctionsClient_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseStorageClient_4 extends _i1.SmartFake
    implements _i4.SupabaseStorageClient {
  _FakeSupabaseStorageClient_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeClient_5 extends _i1.SmartFake
    implements _i4.RealtimeClient {
  _FakeRealtimeClient_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestClient_6 extends _i1.SmartFake
    implements _i4.PostgrestClient {
  _FakePostgrestClient_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQueryBuilder_7 extends _i1.SmartFake
    implements _i4.SupabaseQueryBuilder {
  _FakeSupabaseQueryBuilder_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQuerySchema_8 extends _i1.SmartFake
    implements _i4.SupabaseQuerySchema {
  _FakeSupabaseQuerySchema_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestFilterBuilder_9<T1> extends _i1.SmartFake
    implements _i4.PostgrestFilterBuilder<T1> {
  _FakePostgrestFilterBuilder_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeChannel_10 extends _i1.SmartFake
    implements _i4.RealtimeChannel {
  _FakeRealtimeChannel_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_11 extends _i1.SmartFake implements _i4.User {
  _FakeUser_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSession_12 extends _i1.SmartFake implements _i4.Session {
  _FakeSession_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDataSource extends _i1.Mock
    implements _i5.AuthRemoteDataSource {
  MockAuthRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.UserModel> signUpWithEmailPassword({
    required String? name,
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithEmailPassword,
          [],
          {
            #name: name,
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i6.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #signUpWithEmailPassword,
            [],
            {
              #name: name,
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i6.Future<_i2.UserModel>);

  @override
  _i6.Future<_i2.UserModel> signInWithEmailPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i6.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #signInWithEmailPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i6.Future<_i2.UserModel>);

  @override
  _i6.Future<_i2.UserModel?> getCurrentUserData() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUserData,
          [],
        ),
        returnValue: _i6.Future<_i2.UserModel?>.value(),
      ) as _i6.Future<_i2.UserModel?>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i7.Either<_i8.Failure, _i9.User>> signUpWithEmailPassword({
    required String? name,
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpWithEmailPassword,
          [],
          {
            #name: name,
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i6.Future<_i7.Either<_i8.Failure, _i9.User>>.value(
            _i10.dummyValue<_i7.Either<_i8.Failure, _i9.User>>(
          this,
          Invocation.method(
            #signUpWithEmailPassword,
            [],
            {
              #name: name,
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i6.Future<_i7.Either<_i8.Failure, _i9.User>>);

  @override
  _i6.Future<_i7.Either<_i8.Failure, _i9.User>> signInWithEmailPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i6.Future<_i7.Either<_i8.Failure, _i9.User>>.value(
            _i10.dummyValue<_i7.Either<_i8.Failure, _i9.User>>(
          this,
          Invocation.method(
            #signInWithEmailPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i6.Future<_i7.Either<_i8.Failure, _i9.User>>);

  @override
  _i6.Future<_i7.Either<_i8.Failure, _i9.User>> currentUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #currentUser,
          [],
        ),
        returnValue: _i6.Future<_i7.Either<_i8.Failure, _i9.User>>.value(
            _i10.dummyValue<_i7.Either<_i8.Failure, _i9.User>>(
          this,
          Invocation.method(
            #currentUser,
            [],
          ),
        )),
      ) as _i6.Future<_i7.Either<_i8.Failure, _i9.User>>);
}

/// A class which mocks [CurrentUser].
///
/// See the documentation for Mockito's code generation for more information.
class MockCurrentUser extends _i1.Mock implements _i11.CurrentUser {
  MockCurrentUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i3.AuthRepository);

  @override
  _i6.Future<_i7.Either<_i8.Failure, _i9.User>> call(_i12.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i7.Either<_i8.Failure, _i9.User>>.value(
            _i10.dummyValue<_i7.Either<_i8.Failure, _i9.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i7.Either<_i8.Failure, _i9.User>>);
}

/// A class which mocks [UserSignIn].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserSignIn extends _i1.Mock implements _i13.UserSignIn {
  MockUserSignIn() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i3.AuthRepository);

  @override
  _i6.Future<_i7.Either<_i8.Failure, _i9.User>> call(
          _i13.UserSignInParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i7.Either<_i8.Failure, _i9.User>>.value(
            _i10.dummyValue<_i7.Either<_i8.Failure, _i9.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i7.Either<_i8.Failure, _i9.User>>);
}

/// A class which mocks [UserSignUp].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserSignUp extends _i1.Mock implements _i14.UserSignUp {
  MockUserSignUp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i3.AuthRepository);

  @override
  _i6.Future<_i7.Either<_i8.Failure, _i9.User>> call(
          _i14.UserSignUpParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i7.Either<_i8.Failure, _i9.User>>.value(
            _i10.dummyValue<_i7.Either<_i8.Failure, _i9.User>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i7.Either<_i8.Failure, _i9.User>>);
}

/// A class which mocks [ConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionChecker extends _i1.Mock implements _i15.ConnectionChecker {
  MockConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i4.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GoTrueClient get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeGoTrueClient_2(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i4.GoTrueClient);

  @override
  set auth(_i4.GoTrueClient? _auth) => super.noSuchMethod(
        Invocation.setter(
          #auth,
          _auth,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.FunctionsClient get functions => (super.noSuchMethod(
        Invocation.getter(#functions),
        returnValue: _FakeFunctionsClient_3(
          this,
          Invocation.getter(#functions),
        ),
      ) as _i4.FunctionsClient);

  @override
  set functions(_i4.FunctionsClient? _functions) => super.noSuchMethod(
        Invocation.setter(
          #functions,
          _functions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.SupabaseStorageClient get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeSupabaseStorageClient_4(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i4.SupabaseStorageClient);

  @override
  set storage(_i4.SupabaseStorageClient? _storage) => super.noSuchMethod(
        Invocation.setter(
          #storage,
          _storage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.RealtimeClient get realtime => (super.noSuchMethod(
        Invocation.getter(#realtime),
        returnValue: _FakeRealtimeClient_5(
          this,
          Invocation.getter(#realtime),
        ),
      ) as _i4.RealtimeClient);

  @override
  set realtime(_i4.RealtimeClient? _realtime) => super.noSuchMethod(
        Invocation.setter(
          #realtime,
          _realtime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.PostgrestClient get rest => (super.noSuchMethod(
        Invocation.getter(#rest),
        returnValue: _FakePostgrestClient_6(
          this,
          Invocation.getter(#rest),
        ),
      ) as _i4.PostgrestClient);

  @override
  set rest(_i4.PostgrestClient? _rest) => super.noSuchMethod(
        Invocation.setter(
          #rest,
          _rest,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  set headers(Map<String, String>? headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.SupabaseQueryBuilder from(String? table) => (super.noSuchMethod(
        Invocation.method(
          #from,
          [table],
        ),
        returnValue: _FakeSupabaseQueryBuilder_7(
          this,
          Invocation.method(
            #from,
            [table],
          ),
        ),
      ) as _i4.SupabaseQueryBuilder);

  @override
  _i4.SupabaseQuerySchema schema(String? schema) => (super.noSuchMethod(
        Invocation.method(
          #schema,
          [schema],
        ),
        returnValue: _FakeSupabaseQuerySchema_8(
          this,
          Invocation.method(
            #schema,
            [schema],
          ),
        ),
      ) as _i4.SupabaseQuerySchema);

  @override
  _i4.PostgrestFilterBuilder<T> rpc<T>(
    String? fn, {
    Map<String, dynamic>? params,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rpc,
          [fn],
          {#params: params},
        ),
        returnValue: _FakePostgrestFilterBuilder_9<T>(
          this,
          Invocation.method(
            #rpc,
            [fn],
            {#params: params},
          ),
        ),
      ) as _i4.PostgrestFilterBuilder<T>);

  @override
  _i4.RealtimeChannel channel(
    String? name, {
    _i4.RealtimeChannelConfig? opts = const _i4.RealtimeChannelConfig(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #channel,
          [name],
          {#opts: opts},
        ),
        returnValue: _FakeRealtimeChannel_10(
          this,
          Invocation.method(
            #channel,
            [name],
            {#opts: opts},
          ),
        ),
      ) as _i4.RealtimeChannel);

  @override
  List<_i4.RealtimeChannel> getChannels() => (super.noSuchMethod(
        Invocation.method(
          #getChannels,
          [],
        ),
        returnValue: <_i4.RealtimeChannel>[],
      ) as List<_i4.RealtimeChannel>);

  @override
  _i6.Future<String> removeChannel(_i4.RealtimeChannel? channel) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeChannel,
          [channel],
        ),
        returnValue: _i6.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #removeChannel,
            [channel],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<List<String>> removeAllChannels() => (super.noSuchMethod(
        Invocation.method(
          #removeAllChannels,
          [],
        ),
        returnValue: _i6.Future<List<String>>.value(<String>[]),
      ) as _i6.Future<List<String>>);

  @override
  _i6.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [Session].
///
/// See the documentation for Mockito's code generation for more information.
class MockSession extends _i1.Mock implements _i4.Session {
  MockSession() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get accessToken => (super.noSuchMethod(
        Invocation.getter(#accessToken),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#accessToken),
        ),
      ) as String);

  @override
  String get tokenType => (super.noSuchMethod(
        Invocation.getter(#tokenType),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#tokenType),
        ),
      ) as String);

  @override
  _i4.User get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeUser_11(
          this,
          Invocation.getter(#user),
        ),
      ) as _i4.User);

  @override
  set expiresAt(int? _expiresAt) => super.noSuchMethod(
        Invocation.setter(
          #expiresAt,
          _expiresAt,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isExpired => (super.noSuchMethod(
        Invocation.getter(#isExpired),
        returnValue: false,
      ) as bool);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.Session copyWith({
    String? accessToken,
    int? expiresIn,
    String? refreshToken,
    String? tokenType,
    String? providerToken,
    String? providerRefreshToken,
    _i4.User? user,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #accessToken: accessToken,
            #expiresIn: expiresIn,
            #refreshToken: refreshToken,
            #tokenType: tokenType,
            #providerToken: providerToken,
            #providerRefreshToken: providerRefreshToken,
            #user: user,
          },
        ),
        returnValue: _FakeSession_12(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #accessToken: accessToken,
              #expiresIn: expiresIn,
              #refreshToken: refreshToken,
              #tokenType: tokenType,
              #providerToken: providerToken,
              #providerRefreshToken: providerRefreshToken,
              #user: user,
            },
          ),
        ),
      ) as _i4.Session);
}
