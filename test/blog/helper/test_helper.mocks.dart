// Mocks generated by Mockito 5.4.4 from annotations
// in blog_app/test/blog/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i19;
import 'dart:io' as _i10;
import 'dart:typed_data' as _i20;

import 'package:blog_app/core/error/failure.dart' as _i8;
import 'package:blog_app/core/network/connection_checker.dart' as _i14;
import 'package:blog_app/core/usecase/usecase.dart' as _i15;
import 'package:blog_app/features/blog/data/datasources/blog_local_data_source.dart'
    as _i13;
import 'package:blog_app/features/blog/data/datasources/blog_remote_data_source.dart'
    as _i12;
import 'package:blog_app/features/blog/data/model/blog_model.dart' as _i2;
import 'package:blog_app/features/blog/domain/entities/blog.dart' as _i9;
import 'package:blog_app/features/blog/domain/repositories/blog_repository.dart'
    as _i5;
import 'package:blog_app/features/blog/domain/usecases/delete_blogs.dart'
    as _i18;
import 'package:blog_app/features/blog/domain/usecases/get_all_blogs.dart'
    as _i16;
import 'package:blog_app/features/blog/domain/usecases/upload_blog.dart'
    as _i17;
import 'package:fpdart/fpdart.dart' as _i7;
import 'package:http/http.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:supabase_flutter/supabase_flutter.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBlogModel_0 extends _i1.SmartFake implements _i2.BlogModel {
  _FakeBlogModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoTrueClient_1 extends _i1.SmartFake implements _i3.GoTrueClient {
  _FakeGoTrueClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFunctionsClient_2 extends _i1.SmartFake
    implements _i3.FunctionsClient {
  _FakeFunctionsClient_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseStorageClient_3 extends _i1.SmartFake
    implements _i3.SupabaseStorageClient {
  _FakeSupabaseStorageClient_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeClient_4 extends _i1.SmartFake
    implements _i3.RealtimeClient {
  _FakeRealtimeClient_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestClient_5 extends _i1.SmartFake
    implements _i3.PostgrestClient {
  _FakePostgrestClient_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQueryBuilder_6 extends _i1.SmartFake
    implements _i3.SupabaseQueryBuilder {
  _FakeSupabaseQueryBuilder_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSupabaseQuerySchema_7 extends _i1.SmartFake
    implements _i3.SupabaseQuerySchema {
  _FakeSupabaseQuerySchema_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestFilterBuilder_8<T1> extends _i1.SmartFake
    implements _i3.PostgrestFilterBuilder<T1> {
  _FakePostgrestFilterBuilder_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRealtimeChannel_9 extends _i1.SmartFake
    implements _i3.RealtimeChannel {
  _FakeRealtimeChannel_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestTransformBuilder_10<T1> extends _i1.SmartFake
    implements _i3.PostgrestTransformBuilder<T1> {
  _FakePostgrestTransformBuilder_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponsePostgrestBuilder_11<T1, S, R> extends _i1.SmartFake
    implements _i3.ResponsePostgrestBuilder<T1, S, R> {
  _FakeResponsePostgrestBuilder_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostgrestBuilder_12<T1, S, R> extends _i1.SmartFake
    implements _i3.PostgrestBuilder<T1, S, R> {
  _FakePostgrestBuilder_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_13 extends _i1.SmartFake implements Uri {
  _FakeUri_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_14<T1> extends _i1.SmartFake implements _i4.Future<T1> {
  _FakeFuture_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBlogRepository_15 extends _i1.SmartFake
    implements _i5.BlogRepository {
  _FakeBlogRepository_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_16 extends _i1.SmartFake implements _i6.Response {
  _FakeResponse_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_17 extends _i1.SmartFake
    implements _i6.StreamedResponse {
  _FakeStreamedResponse_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BlogRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlogRepository extends _i1.Mock implements _i5.BlogRepository {
  MockBlogRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i7.Either<_i8.Failure, _i9.Blog>> uploadBlog({
    required _i10.File? image,
    required String? title,
    required String? content,
    required String? posterId,
    required List<String>? topics,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadBlog,
          [],
          {
            #image: image,
            #title: title,
            #content: content,
            #posterId: posterId,
            #topics: topics,
          },
        ),
        returnValue: _i4.Future<_i7.Either<_i8.Failure, _i9.Blog>>.value(
            _i11.dummyValue<_i7.Either<_i8.Failure, _i9.Blog>>(
          this,
          Invocation.method(
            #uploadBlog,
            [],
            {
              #image: image,
              #title: title,
              #content: content,
              #posterId: posterId,
              #topics: topics,
            },
          ),
        )),
      ) as _i4.Future<_i7.Either<_i8.Failure, _i9.Blog>>);

  @override
  _i4.Future<_i7.Either<_i8.Failure, List<_i9.Blog>>> getAllBlogs() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllBlogs,
          [],
        ),
        returnValue: _i4.Future<_i7.Either<_i8.Failure, List<_i9.Blog>>>.value(
            _i11.dummyValue<_i7.Either<_i8.Failure, List<_i9.Blog>>>(
          this,
          Invocation.method(
            #getAllBlogs,
            [],
          ),
        )),
      ) as _i4.Future<_i7.Either<_i8.Failure, List<_i9.Blog>>>);

  @override
  _i7.Either<_i8.Failure, String> deleteBlogs(
          {required Map<dynamic, dynamic>? blogId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBlogs,
          [],
          {#blogId: blogId},
        ),
        returnValue: _i11.dummyValue<_i7.Either<_i8.Failure, String>>(
          this,
          Invocation.method(
            #deleteBlogs,
            [],
            {#blogId: blogId},
          ),
        ),
      ) as _i7.Either<_i8.Failure, String>);
}

/// A class which mocks [BlogRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlogRemoteDataSource extends _i1.Mock
    implements _i12.BlogRemoteDataSource {
  MockBlogRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.BlogModel> uploadBlog(_i2.BlogModel? blog) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadBlog,
          [blog],
        ),
        returnValue: _i4.Future<_i2.BlogModel>.value(_FakeBlogModel_0(
          this,
          Invocation.method(
            #uploadBlog,
            [blog],
          ),
        )),
      ) as _i4.Future<_i2.BlogModel>);

  @override
  _i4.Future<String> uploadBlogImage({
    required _i10.File? image,
    required _i2.BlogModel? blog,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadBlogImage,
          [],
          {
            #image: image,
            #blog: blog,
          },
        ),
        returnValue: _i4.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #uploadBlogImage,
            [],
            {
              #image: image,
              #blog: blog,
            },
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<List<_i2.BlogModel>> getAllBlogs() => (super.noSuchMethod(
        Invocation.method(
          #getAllBlogs,
          [],
        ),
        returnValue: _i4.Future<List<_i2.BlogModel>>.value(<_i2.BlogModel>[]),
      ) as _i4.Future<List<_i2.BlogModel>>);

  @override
  void deleteBlogs({required Map<dynamic, dynamic>? blogId}) =>
      super.noSuchMethod(
        Invocation.method(
          #deleteBlogs,
          [],
          {#blogId: blogId},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BlogLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBlogLocalDataSource extends _i1.Mock
    implements _i13.BlogLocalDataSource {
  MockBlogLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void uploadLocalBlogs({required List<_i2.BlogModel>? blogs}) =>
      super.noSuchMethod(
        Invocation.method(
          #uploadLocalBlogs,
          [],
          {#blogs: blogs},
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i2.BlogModel> loadBlogs() => (super.noSuchMethod(
        Invocation.method(
          #loadBlogs,
          [],
        ),
        returnValue: <_i2.BlogModel>[],
      ) as List<_i2.BlogModel>);
}

/// A class which mocks [ConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectionChecker extends _i1.Mock implements _i14.ConnectionChecker {
  MockConnectionChecker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [UseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUseCase<SuccessType, Params> extends _i1.Mock
    implements _i15.UseCase<SuccessType, Params> {
  MockUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i7.Either<_i8.Failure, SuccessType>> call(Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i7.Either<_i8.Failure, SuccessType>>.value(
            _i11.dummyValue<_i7.Either<_i8.Failure, SuccessType>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i7.Either<_i8.Failure, SuccessType>>);
}

/// A class which mocks [SupabaseClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseClient extends _i1.Mock implements _i3.SupabaseClient {
  MockSupabaseClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GoTrueClient get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeGoTrueClient_1(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i3.GoTrueClient);

  @override
  set auth(_i3.GoTrueClient? _auth) => super.noSuchMethod(
        Invocation.setter(
          #auth,
          _auth,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.FunctionsClient get functions => (super.noSuchMethod(
        Invocation.getter(#functions),
        returnValue: _FakeFunctionsClient_2(
          this,
          Invocation.getter(#functions),
        ),
      ) as _i3.FunctionsClient);

  @override
  set functions(_i3.FunctionsClient? _functions) => super.noSuchMethod(
        Invocation.setter(
          #functions,
          _functions,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.SupabaseStorageClient get storage => (super.noSuchMethod(
        Invocation.getter(#storage),
        returnValue: _FakeSupabaseStorageClient_3(
          this,
          Invocation.getter(#storage),
        ),
      ) as _i3.SupabaseStorageClient);

  @override
  set storage(_i3.SupabaseStorageClient? _storage) => super.noSuchMethod(
        Invocation.setter(
          #storage,
          _storage,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.RealtimeClient get realtime => (super.noSuchMethod(
        Invocation.getter(#realtime),
        returnValue: _FakeRealtimeClient_4(
          this,
          Invocation.getter(#realtime),
        ),
      ) as _i3.RealtimeClient);

  @override
  set realtime(_i3.RealtimeClient? _realtime) => super.noSuchMethod(
        Invocation.setter(
          #realtime,
          _realtime,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.PostgrestClient get rest => (super.noSuchMethod(
        Invocation.getter(#rest),
        returnValue: _FakePostgrestClient_5(
          this,
          Invocation.getter(#rest),
        ),
      ) as _i3.PostgrestClient);

  @override
  set rest(_i3.PostgrestClient? _rest) => super.noSuchMethod(
        Invocation.setter(
          #rest,
          _rest,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
      ) as Map<String, String>);

  @override
  set headers(Map<String, String>? headers) => super.noSuchMethod(
        Invocation.setter(
          #headers,
          headers,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.SupabaseQueryBuilder from(String? table) => (super.noSuchMethod(
        Invocation.method(
          #from,
          [table],
        ),
        returnValue: _FakeSupabaseQueryBuilder_6(
          this,
          Invocation.method(
            #from,
            [table],
          ),
        ),
      ) as _i3.SupabaseQueryBuilder);

  @override
  _i3.SupabaseQuerySchema schema(String? schema) => (super.noSuchMethod(
        Invocation.method(
          #schema,
          [schema],
        ),
        returnValue: _FakeSupabaseQuerySchema_7(
          this,
          Invocation.method(
            #schema,
            [schema],
          ),
        ),
      ) as _i3.SupabaseQuerySchema);

  @override
  _i3.PostgrestFilterBuilder<T> rpc<T>(
    String? fn, {
    Map<String, dynamic>? params,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rpc,
          [fn],
          {#params: params},
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #rpc,
            [fn],
            {#params: params},
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.RealtimeChannel channel(
    String? name, {
    _i3.RealtimeChannelConfig? opts = const _i3.RealtimeChannelConfig(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #channel,
          [name],
          {#opts: opts},
        ),
        returnValue: _FakeRealtimeChannel_9(
          this,
          Invocation.method(
            #channel,
            [name],
            {#opts: opts},
          ),
        ),
      ) as _i3.RealtimeChannel);

  @override
  List<_i3.RealtimeChannel> getChannels() => (super.noSuchMethod(
        Invocation.method(
          #getChannels,
          [],
        ),
        returnValue: <_i3.RealtimeChannel>[],
      ) as List<_i3.RealtimeChannel>);

  @override
  _i4.Future<String> removeChannel(_i3.RealtimeChannel? channel) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeChannel,
          [channel],
        ),
        returnValue: _i4.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #removeChannel,
            [channel],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<List<String>> removeAllChannels() => (super.noSuchMethod(
        Invocation.method(
          #removeAllChannels,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [PostgrestFilterBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostgrestFilterBuilder<T> extends _i1.Mock
    implements _i3.PostgrestFilterBuilder<T> {
  MockPostgrestFilterBuilder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PostgrestFilterBuilder<T> copyWithUrl(Uri? url) => (super.noSuchMethod(
        Invocation.method(
          #copyWithUrl,
          [url],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #copyWithUrl,
            [url],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> not(
    String? column,
    String? operator,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #not,
          [
            column,
            operator,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #not,
            [
              column,
              operator,
              value,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> or(
    String? filters, {
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #or,
          [filters],
          {#referencedTable: referencedTable},
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #or,
            [filters],
            {#referencedTable: referencedTable},
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> eq(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #eq,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #eq,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> neq(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #neq,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #neq,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> gt(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #gt,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #gt,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> gte(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #gte,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #gte,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> lt(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lt,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #lt,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> lte(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #lte,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #lte,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> like(
    String? column,
    String? pattern,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #like,
          [
            column,
            pattern,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #like,
            [
              column,
              pattern,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<dynamic> likeAllOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likeAllOf,
          [
            column,
            patterns,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<dynamic>(
          this,
          Invocation.method(
            #likeAllOf,
            [
              column,
              patterns,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<dynamic>);

  @override
  _i3.PostgrestFilterBuilder<dynamic> likeAnyOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likeAnyOf,
          [
            column,
            patterns,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<dynamic>(
          this,
          Invocation.method(
            #likeAnyOf,
            [
              column,
              patterns,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<dynamic>);

  @override
  _i3.PostgrestFilterBuilder<T> ilike(
    String? column,
    String? pattern,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #ilike,
          [
            column,
            pattern,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #ilike,
            [
              column,
              pattern,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<dynamic> ilikeAllOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #ilikeAllOf,
          [
            column,
            patterns,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<dynamic>(
          this,
          Invocation.method(
            #ilikeAllOf,
            [
              column,
              patterns,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<dynamic>);

  @override
  _i3.PostgrestFilterBuilder<dynamic> ilikeAnyOf(
    String? column,
    List<String>? patterns,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #ilikeAnyOf,
          [
            column,
            patterns,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<dynamic>(
          this,
          Invocation.method(
            #ilikeAnyOf,
            [
              column,
              patterns,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<dynamic>);

  @override
  _i3.PostgrestFilterBuilder<T> isFilter(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isFilter,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #isFilter,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> inFilter(
    String? column,
    List<dynamic>? values,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #inFilter,
          [
            column,
            values,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #inFilter,
            [
              column,
              values,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> contains(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #contains,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #contains,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> containedBy(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #containedBy,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #containedBy,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> rangeLt(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeLt,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #rangeLt,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> rangeGt(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeGt,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #rangeGt,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> rangeGte(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeGte,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #rangeGte,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> rangeLte(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeLte,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #rangeLte,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> rangeAdjacent(
    String? column,
    String? range,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #rangeAdjacent,
          [
            column,
            range,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #rangeAdjacent,
            [
              column,
              range,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> overlaps(
    String? column,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #overlaps,
          [
            column,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #overlaps,
            [
              column,
              value,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> textSearch(
    String? column,
    String? query, {
    String? config,
    _i3.TextSearchType? type,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #textSearch,
          [
            column,
            query,
          ],
          {
            #config: config,
            #type: type,
          },
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #textSearch,
            [
              column,
              query,
            ],
            {
              #config: config,
              #type: type,
            },
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> filter(
    String? column,
    String? operator,
    Object? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #filter,
          [
            column,
            operator,
            value,
          ],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #filter,
            [
              column,
              operator,
              value,
            ],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestFilterBuilder<T> match(Map<dynamic, dynamic>? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #match,
          [query],
        ),
        returnValue: _FakePostgrestFilterBuilder_8<T>(
          this,
          Invocation.method(
            #match,
            [query],
          ),
        ),
      ) as _i3.PostgrestFilterBuilder<T>);

  @override
  _i3.PostgrestTransformBuilder<List<Map<String, dynamic>>> select(
          [String? columns = r'*']) =>
      (super.noSuchMethod(
        Invocation.method(
          #select,
          [columns],
        ),
        returnValue:
            _FakePostgrestTransformBuilder_10<List<Map<String, dynamic>>>(
          this,
          Invocation.method(
            #select,
            [columns],
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<List<Map<String, dynamic>>>);

  @override
  _i3.PostgrestTransformBuilder<T> order(
    String? column, {
    bool? ascending = false,
    bool? nullsFirst = false,
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #order,
          [column],
          {
            #ascending: ascending,
            #nullsFirst: nullsFirst,
            #referencedTable: referencedTable,
          },
        ),
        returnValue: _FakePostgrestTransformBuilder_10<T>(
          this,
          Invocation.method(
            #order,
            [column],
            {
              #ascending: ascending,
              #nullsFirst: nullsFirst,
              #referencedTable: referencedTable,
            },
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<T>);

  @override
  _i3.PostgrestTransformBuilder<T> limit(
    int? count, {
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #limit,
          [count],
          {#referencedTable: referencedTable},
        ),
        returnValue: _FakePostgrestTransformBuilder_10<T>(
          this,
          Invocation.method(
            #limit,
            [count],
            {#referencedTable: referencedTable},
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<T>);

  @override
  _i3.PostgrestTransformBuilder<T> range(
    int? from,
    int? to, {
    String? referencedTable,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #range,
          [
            from,
            to,
          ],
          {#referencedTable: referencedTable},
        ),
        returnValue: _FakePostgrestTransformBuilder_10<T>(
          this,
          Invocation.method(
            #range,
            [
              from,
              to,
            ],
            {#referencedTable: referencedTable},
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<T>);

  @override
  _i3.PostgrestTransformBuilder<Map<String, dynamic>> single() =>
      (super.noSuchMethod(
        Invocation.method(
          #single,
          [],
        ),
        returnValue: _FakePostgrestTransformBuilder_10<Map<String, dynamic>>(
          this,
          Invocation.method(
            #single,
            [],
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<Map<String, dynamic>>);

  @override
  _i3.PostgrestTransformBuilder<Map<String, dynamic>?> maybeSingle() =>
      (super.noSuchMethod(
        Invocation.method(
          #maybeSingle,
          [],
        ),
        returnValue: _FakePostgrestTransformBuilder_10<Map<String, dynamic>?>(
          this,
          Invocation.method(
            #maybeSingle,
            [],
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<Map<String, dynamic>?>);

  @override
  _i3.PostgrestTransformBuilder<String> csv() => (super.noSuchMethod(
        Invocation.method(
          #csv,
          [],
        ),
        returnValue: _FakePostgrestTransformBuilder_10<String>(
          this,
          Invocation.method(
            #csv,
            [],
          ),
        ),
      ) as _i3.PostgrestTransformBuilder<String>);

  @override
  _i3.ResponsePostgrestBuilder<_i3.PostgrestResponse<T>, T, T> count(
          [_i3.CountOption? count = _i3.CountOption.exact]) =>
      (super.noSuchMethod(
        Invocation.method(
          #count,
          [count],
        ),
        returnValue:
            _FakeResponsePostgrestBuilder_11<_i3.PostgrestResponse<T>, T, T>(
          this,
          Invocation.method(
            #count,
            [count],
          ),
        ),
      ) as _i3.ResponsePostgrestBuilder<_i3.PostgrestResponse<T>, T, T>);

  @override
  _i3.PostgrestBuilder<void, void, void> head() => (super.noSuchMethod(
        Invocation.method(
          #head,
          [],
        ),
        returnValue: _FakePostgrestBuilder_12<void, void, void>(
          this,
          Invocation.method(
            #head,
            [],
          ),
        ),
      ) as _i3.PostgrestBuilder<void, void, void>);

  @override
  _i3.ResponsePostgrestBuilder<Map<String, dynamic>,
          Map<String, dynamic>, Map<String, dynamic>>
      geojson() => (super.noSuchMethod(
            Invocation.method(
              #geojson,
              [],
            ),
            returnValue: _FakeResponsePostgrestBuilder_11<Map<String, dynamic>,
                Map<String, dynamic>, Map<String, dynamic>>(
              this,
              Invocation.method(
                #geojson,
                [],
              ),
            ),
          ) as _i3.ResponsePostgrestBuilder<Map<String, dynamic>,
              Map<String, dynamic>, Map<String, dynamic>>);

  @override
  _i3.PostgrestBuilder<String, String, String> explain({
    bool? analyze = false,
    bool? verbose = false,
    bool? settings = false,
    bool? buffers = false,
    bool? wal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #explain,
          [],
          {
            #analyze: analyze,
            #verbose: verbose,
            #settings: settings,
            #buffers: buffers,
            #wal: wal,
          },
        ),
        returnValue: _FakePostgrestBuilder_12<String, String, String>(
          this,
          Invocation.method(
            #explain,
            [],
            {
              #analyze: analyze,
              #verbose: verbose,
              #settings: settings,
              #buffers: buffers,
              #wal: wal,
            },
          ),
        ),
      ) as _i3.PostgrestBuilder<String, String, String>);

  @override
  _i3.PostgrestBuilder<U, U, T> withConverter<U>(
          _i3.PostgrestConverter<U, T>? converter) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [converter],
        ),
        returnValue: _FakePostgrestBuilder_12<U, U, T>(
          this,
          Invocation.method(
            #withConverter,
            [converter],
          ),
        ),
      ) as _i3.PostgrestBuilder<U, U, T>);

  @override
  Uri appendSearchParams(
    String? key,
    String? value, [
    Uri? url,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #appendSearchParams,
          [
            key,
            value,
            url,
          ],
        ),
        returnValue: _FakeUri_13(
          this,
          Invocation.method(
            #appendSearchParams,
            [
              key,
              value,
              url,
            ],
          ),
        ),
      ) as Uri);

  @override
  Uri overrideSearchParams(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #overrideSearchParams,
          [
            key,
            value,
          ],
        ),
        returnValue: _FakeUri_13(
          this,
          Invocation.method(
            #overrideSearchParams,
            [
              key,
              value,
            ],
          ),
        ),
      ) as Uri);

  @override
  _i4.Stream<T> asStream() => (super.noSuchMethod(
        Invocation.method(
          #asStream,
          [],
        ),
        returnValue: _i4.Stream<T>.empty(),
      ) as _i4.Stream<T>);

  @override
  _i4.Future<T> catchError(
    Function? onError, {
    bool Function(Object)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #catchError,
          [onError],
          {#test: test},
        ),
        returnValue: _i11.ifNotNull(
              _i11.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #catchError,
                  [onError],
                  {#test: test},
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #catchError,
                [onError],
                {#test: test},
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<U> then<U>(
    _i4.FutureOr<U> Function(T)? onValue, {
    Function? onError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #then,
          [onValue],
          {#onError: onError},
        ),
        returnValue: _i11.ifNotNull(
              _i11.dummyValueOrNull<U>(
                this,
                Invocation.method(
                  #then,
                  [onValue],
                  {#onError: onError},
                ),
              ),
              (U v) => _i4.Future<U>.value(v),
            ) ??
            _FakeFuture_14<U>(
              this,
              Invocation.method(
                #then,
                [onValue],
                {#onError: onError},
              ),
            ),
      ) as _i4.Future<U>);

  @override
  _i4.Future<T> timeout(
    Duration? timeLimit, {
    _i4.FutureOr<T> Function()? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i11.ifNotNull(
              _i11.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #timeout,
                  [timeLimit],
                  {#onTimeout: onTimeout},
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #timeout,
                [timeLimit],
                {#onTimeout: onTimeout},
              ),
            ),
      ) as _i4.Future<T>);

  @override
  _i4.Future<T> whenComplete(_i4.FutureOr<void> Function()? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #whenComplete,
          [action],
        ),
        returnValue: _i11.ifNotNull(
              _i11.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #whenComplete,
                  [action],
                ),
              ),
              (T v) => _i4.Future<T>.value(v),
            ) ??
            _FakeFuture_14<T>(
              this,
              Invocation.method(
                #whenComplete,
                [action],
              ),
            ),
      ) as _i4.Future<T>);
}

/// A class which mocks [GetAllBlogsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllBlogsUseCase extends _i1.Mock
    implements _i16.GetAllBlogsUseCase {
  MockGetAllBlogsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.BlogRepository get blogRepository => (super.noSuchMethod(
        Invocation.getter(#blogRepository),
        returnValue: _FakeBlogRepository_15(
          this,
          Invocation.getter(#blogRepository),
        ),
      ) as _i5.BlogRepository);

  @override
  _i4.Future<_i7.Either<_i8.Failure, List<_i9.Blog>>> call(
          _i15.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i7.Either<_i8.Failure, List<_i9.Blog>>>.value(
            _i11.dummyValue<_i7.Either<_i8.Failure, List<_i9.Blog>>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i7.Either<_i8.Failure, List<_i9.Blog>>>);
}

/// A class which mocks [UploadBlog].
///
/// See the documentation for Mockito's code generation for more information.
class MockUploadBlog extends _i1.Mock implements _i17.UploadBlog {
  MockUploadBlog() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.BlogRepository get blogRepository => (super.noSuchMethod(
        Invocation.getter(#blogRepository),
        returnValue: _FakeBlogRepository_15(
          this,
          Invocation.getter(#blogRepository),
        ),
      ) as _i5.BlogRepository);

  @override
  _i4.Future<_i7.Either<_i8.Failure, _i9.Blog>> call(
          _i17.UploadBlogParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i7.Either<_i8.Failure, _i9.Blog>>.value(
            _i11.dummyValue<_i7.Either<_i8.Failure, _i9.Blog>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i7.Either<_i8.Failure, _i9.Blog>>);
}

/// A class which mocks [DeleteBlogs].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteBlogs extends _i1.Mock implements _i18.DeleteBlogs {
  MockDeleteBlogs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.BlogRepository get blogRepository => (super.noSuchMethod(
        Invocation.getter(#blogRepository),
        returnValue: _FakeBlogRepository_15(
          this,
          Invocation.getter(#blogRepository),
        ),
      ) as _i5.BlogRepository);

  @override
  _i4.Future<_i7.Either<_i8.Failure, String>> call(
          _i18.DeleteBlogsParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i7.Either<_i8.Failure, String>>.value(
            _i11.dummyValue<_i7.Either<_i8.Failure, String>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i7.Either<_i8.Failure, String>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i6.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i6.Response>.value(_FakeResponse_16(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<_i6.Response>);

  @override
  _i4.Future<_i6.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i6.Response>.value(_FakeResponse_16(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<_i6.Response>);

  @override
  _i4.Future<_i6.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i6.Response>.value(_FakeResponse_16(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i6.Response>);

  @override
  _i4.Future<_i6.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i6.Response>.value(_FakeResponse_16(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i6.Response>);

  @override
  _i4.Future<_i6.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i6.Response>.value(_FakeResponse_16(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i6.Response>);

  @override
  _i4.Future<_i6.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i19.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i4.Future<_i6.Response>.value(_FakeResponse_16(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i4.Future<_i6.Response>);

  @override
  _i4.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<_i20.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i4.Future<_i20.Uint8List>.value(_i20.Uint8List(0)),
      ) as _i4.Future<_i20.Uint8List>);

  @override
  _i4.Future<_i6.StreamedResponse> send(_i6.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i4.Future<_i6.StreamedResponse>.value(_FakeStreamedResponse_17(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i4.Future<_i6.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
